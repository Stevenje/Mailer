// Generated by CoffeeScript 1.7.1
var Profile, addRepoOverview, addRepositories, addToDB, client, db, frequest, getData, getFullProfile, mongoose, profileSchema, repoOverview, request;

mongoose = require("mongoose");

mongoose.connect("mongodb://localhost/githubdb");

db = mongoose.connection;

profileSchema = new mongoose.Schema({
  avatar_url: String,
  html_url: String,
  repos_url: String,
  name: String,
  company: String,
  blog: String,
  location: String,
  hireable: Boolean,
  bio: String,
  email: {
    type: String,
    required: true,
    index: true
  },
  addedToDB: {
    type: Date,
    "default": Date.now
  },
  repos: [
    {
      name: String,
      html_url: String,
      lang: String
    }
  ],
  repoOverview: {},
  messages: [
    {
      author: String,
      body: String,
      date: {
        type: Date,
        "default": Date.now
      }
    }
  ],
  comments: [
    {
      author: String,
      body: String,
      date: {
        type: Date,
        "default": Date.now
      }
    }
  ]
});

Profile = mongoose.model('Profile', profileSchema);

request = require("request-json");

frequest = require("request");

client = request.newClient('https://api.github.com/');

getFullProfile = function(profile, callback) {
  var options;
  options = {
    url: profile.url,
    headers: {
      'User-Agent': 'Kontak',
      'Authorization': 'token 6aad69a10231747228cf153b3ce96a79c695e210'
    },
    json: true
  };
  return frequest(options, function(error, responce, body) {
    if (error) {
      return console.log(error);
    } else if (body.email === null) {
      return null;
    } else if (body.email === "") {
      return null;
    } else if (body.site_admin === true) {
      return null;
    } else {
      console.log("Retrieved Full Profile of " + body.name);
      return callback(body);
    }
  });
};

addRepositories = function(profile, callback) {
  var options;
  options = {
    url: profile.repos_url,
    headers: {
      'User-Agent': 'Kontak',
      'Authorization': 'token 6aad69a10231747228cf153b3ce96a79c695e210'
    },
    json: true
  };
  return frequest(options, function(error, responce, body) {
    var repo, _i, _len;
    if (error) {
      return console.log(error);
    } else {
      for (_i = 0, _len = body.length; _i < _len; _i++) {
        repo = body[_i];
        Profile.update({
          _id: profile._id
        }, {
          $push: {
            repos: {
              name: repo.name,
              html_url: repo.html_url,
              lang: repo.language
            }
          }
        }, {
          upsert: true
        }, function(err, data) {});
      }
      return callback(profile);
    }
  });
};

repoOverview = function(profile, callback) {
  return Profile.findById(profile.id, function(err, profile) {
    var dist, repo, _i, _len, _ref;
    dist = {};
    _ref = profile.repos;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      repo = _ref[_i];
      if (repo.lang === "null") {
        null;
      } else if (repo.lang === null) {
        null;
      } else if (dist[repo.lang] === void 0) {
        dist[repo.lang] = 1;
      } else {
        dist[repo.lang] += 1;
      }
    }
    return callback(profile, dist);
  });
};

addRepoOverview = function(profile, dist) {
  Profile.update({
    _id: profile._id
  }, {
    $push: {
      repoOverview: dist
    }
  }, {
    upsert: true
  }, function(err, data) {});
  return console.log("Finished with " + profile.name);
};

addToDB = function(item, callback) {
  var profile;
  profile = new Profile({
    avatar_url: item.avatar_url,
    html_url: item.html_url,
    repos_url: item.repos_url,
    name: item.name,
    company: item.company,
    blog: item.blog,
    location: item.location,
    email: item.email,
    hireable: item.hireable,
    bio: item.bio
  });
  return profile.save(function(err) {
    if (err) {
      return console.log(err);
    } else {
      return callback(profile);
    }
  });
};

getData = function(lang, location, page) {
  return client.get('search/users?q=location:' + location + '+language:' + lang + '&page=' + page, function(err, res, body) {
    var profile, profilearray, _i, _len, _results;
    profilearray = body.items;
    _results = [];
    for (_i = 0, _len = profilearray.length; _i < _len; _i++) {
      profile = profilearray[_i];
      _results.push(getFullProfile(profile, function(item) {
        return addToDB(item, function(user) {
          return addRepositories(user, function(profile1) {
            return repoOverview(profile1, function(profile2, dist) {
              return addRepoOverview(profile2, dist);
            });
          });
        });
      }));
    }
    return _results;
  });
};

getData("Objective-C", "London", 2);
